from argparse import ArgumentParser, Namespace
from pprint import pprint
import json
import requests
import os
import sys
from logging import Logger, Formatter, StreamHandler
from logging.handlers import RotatingFileHandler

logger = Logger(__name__)
filehandler = RotatingFileHandler('konohana.log', maxBytes = 10**6)
streamhandler = StreamHandler(sys.stdout)
formatter = Formatter('%(asctime)s - %(message)s')
filehandler.setFormatter(formatter)
streamhandler.setFormatter(formatter)
logger.addHandler(filehandler)
logger.addHandler(streamhandler)

NODE_TYPES = ['ricefield', 'herbs', 'empty']

def dispatch_request(func):
	def wrapper(**kwargs):
		try:
			r = func(**kwargs)
			return r
		except requests.ConnectionError:
			logger.info('Could not connect to server')
		except Exception, e:
			logger.info('Something went wrong!: %s'%e)
	return wrapper

class Konohana(object):
	@classmethod
	def confirm_destroy(satoyama_type, mid, **kwargs):
		invalid_choice = True
		while invalid_choice:
			choice = raw_input('Are you sure that you want to destroy %s %s and all data it owns? [Y/n]? '%(satoyama_type, mid))
			if choice in ['Y', 'y', 'Yes', 'yes']:
				print 'Destroyed %s %s'%(satoyama_type, mid)
				return True
			elif choice in ['n', 'N', 'no', 'No']:
				return False
			else:
				print 'Please choose yes or no :)'

	@classmethod
	def send_raw_input(**args):
		pass

	@staticmethod
	@dispatch_request
	def sites(**kwargs):
		r = requests.get(URL + 'sites')
		sites = json.loads(r.text)['objects']
		pprint(map(lambda s: 'id: %s, alias: %s, nodes: %s'%(s['id'], s['alias'], len(s['nodes'])), sites))


	@staticmethod
	@dispatch_request
	def nodes(**kwargs):
		r = requests.get(URL + 'nodes')
		nodes = json.loads(r.text)['objects']
		pprint(map(lambda n: 'id: %s, alias: %s, sensors: %s'%(n['id'], ['alias'], len(n['sensors'])), nodes))

	
	@staticmethod
	def create_node(alias, node_type, short_address = None, site = None, **kwargs):
		
		if kwargs.has_key('longitude'): longitude = kwargs['longitude']
		else: longitude = None

		if kwargs.has_key('latitude'): latitude = kwargs['latitude']
		else: latitude = None

		if kwargs.has_key('short_address'): short_address = kwargs['short_address']
		else: short_address = None

		data = {'alias' : alias, 'node_type': node_type, 'site_id': site, 'longitude': longitude, 'latitude': latitude, 'short_address' : short_address}
		r = requests.post(URL + 'node', data = data)
		
		if not r.ok:
			print r
		else:
			response = json.loads(r.text)
			logger.info('created node')
			pprint(response['objects'][0])






if __name__ == "__main__":
	parser = ArgumentParser()

	###
	### Main parser
	###
	parser.add_argument('-y', action='store_true', help='If specified, Konohana will not ask for confirmation when destroying Satoyama entities.')
	parser.add_argument('--host', help = 'Server IP address e.g., 107.170.251.142', default = '128.199.191.249')
	parser.add_argument('--port', help = 'Port on the server (usually 80)', default = 80)
	subparsers = parser.add_subparsers(help='sub-command help', dest = 'action')

	
	###
	### Subparser for listing sites and nodes
	###
	parser_create_node = subparsers.add_parser('sites', help='Get a list of the ids of all existing sites')
	parser_create_node = subparsers.add_parser('nodes', help='Get a list of the ids of all existing nodes')
	
	###
	### Subparser for create node
	###
	parser_create_node = subparsers.add_parser('create_node', help='Create a site or node')
	parser_create_node.add_argument('alias', type = str, help = 'The name of the node (e.g. "ricefield_small_waterlevel")')
	parser_create_node.add_argument('--node_type', '-t', choices = NODE_TYPES, required = True)
	parser_create_node.add_argument('--short_address', '-a', type = int, help = 'The Chibi short adress of the node', required = False)
	parser_create_node.add_argument('--site', '-s', type = int, help = 'The id of the site that the node belongs to', required = True)
	parser_create_node.add_argument('--latitude', type = float, help = 'The latitude of the node', required = False)
	parser_create_node.add_argument('--longitude', type = float, help = 'The latitude of the node', required = False)

	###
	### Subparser for destroy node
	###
	parser_destroy_node = subparsers.add_parser('destroy-node', help='Destroy a node')
	parser_destroy_node.add_argument('id', type = int, help = 'The id of the node you want to destroy')
	parser_destroy_node.add_argument('--erase_data', '-E', action = 'store_true', help = 'Set this flag to erase all sensor data generated by sensors in the node')

	###
	### Subparser for create site
	###
	parser_create_site = subparsers.add_parser('create-site', help='create a site')
	parser_create_site.add_argument('name', type = str, help = 'The name of the site (e.g. "Hackerfarm")')

	###
	### Subparser for destroy site
	###
	parser_destroy_site = subparsers.add_parser('destroy-site', help='Destroy a site')
	parser_destroy_site.add_argument('id', type = int, help = 'The id of the node you want to destroy')
	parser_destroy_site.add_argument('--erase_data', '-E', action = 'store_true', help = 'Set this flag to erase all sensor data generated by sensors in the node')

	args = parser.parse_args()	

	HOST = args.host
		
	try:
		PORT = int(args.port)
	except ValueError:
		print "Please specify a port with an integer"
		os._exit(1)

	URL = 'http://%s:%s/'%(HOST, PORT)

	print vars(args)
	getattr(Konohana, args.action)(**vars(args))

	# print action, model
	
